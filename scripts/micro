#!/usr/bin/env bash

#
# parameters and handy variables
#

COMMAND=$1
MICROSERVICE=$2

TAG="dev"
PACKAGEBASE="chasemoskal/metalshop"
COMMANDLIST="'build', 'run', 'debug', or 'buildall'"

declare -a microservices=(
	auth-server
	liveshow-server
	paywall-server
	questions-server
	schedule-server
	settings-server
)

#
# functions
#

require_param_container() {
	if [[ ! -z "$COMMAND" && -z "$MICROSERVICE" ]]; then
		echo "ERR container param required, one of: ${microservices[*]}"
		exit 1
	elif [[ ! " ${microservices[@]} " =~ " $MICROSERVICE " ]]; then
		echo "ERR unknown container param $MICROSERVICE, must be one of: ${microservices[*]}"
		exit 1
	fi
}

dockerbuild() {
	NAME=$1
	docker build \
		--file ./source/microservices/$NAME/Dockerfile \
		--tag $PACKAGEBASE-$NAME:$TAG \
		--quiet \
		.
}

dockerrun() {
	NAME=$1
	CMD=$2
	docker run \
		--name $PACKAGEBASE-$NAME \
		--mount type=bind,source="$(pwd)"/metalback/config,target=/app/config,readonly \
		--network br0 \
		--publish 8000:8000 \
		--rm \
		--interactive \
		--tty \
		$PACKAGEBASE-$NAME:$TAG \
		$CMD
}

#
# always require the command parameter
#

if [[ -z "$COMMAND" ]]; then
	echo "ERR command param required, eg $COMMANDLIST"
	exit 1
fi

#
# command implementations
#

if [ "$COMMAND" == "buildall" ]; then
	for server in "${microservices[@]}"; do
		dockerbuild $server
	done
	wait

elif [ "$COMMAND" == "build" ]; then
	require_param_container
	dockerbuild $MICROSERVICE

elif [ "$COMMAND" == "run" ]; then
	require_param_container
	dockerrun $MICROSERVICE

elif [ "$COMMAND" == "debug" ]; then
	require_param_container
	dockerrun $MICROSERVICE bash

else
	echo "ERR unknown command, must be $COMMANDLIST"

fi
